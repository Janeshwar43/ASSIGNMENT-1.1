{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "67b82a21",
   "metadata": {},
   "outputs": [],
   "source": [
    "############\n",
    "\n",
    "#11Which of these is not a core data type?\n",
    "(A) Lists\n",
    "(B) Dictionary\n",
    "(C) Tuples\n",
    "(D) Class\n",
    "     \n",
    "  #class\n",
    "    \n",
    "    \n",
    "#22Which of the following is the correct extension of the Python file?\n",
    "a) .python\n",
    "b) .pl\n",
    "c) .py\n",
    "d) .p\n",
    "  #.py\n",
    "    \n",
    "    \n",
    "# 33Differentiate between lists and tuples.\n",
    "\n",
    "##ans..The major difference is that a list is mutable, but a tuple is immutable. Examples:\n",
    "\n",
    ">>> mylist=[1,3,3]\n",
    ">>> mylist[1]=2\n",
    ">>> mytuple=(1,3,3)\n",
    ">>> mytuple[1]=2\n",
    "\n",
    "\n",
    "##44 What are negative indices?\n",
    "\n",
    "Let’s take a list for this.\n",
    "\n",
    ">>> mylist=[0,1,2,3,4,5,6,7,8]\n",
    "A negative index, unlike a positive one, begins searching from the right.\n",
    "\n",
    ">>> mylist[-3]\n",
    "\n",
    "\n",
    "##55How would you convert a string into lowercase?\n",
    "\n",
    "We use the lower() method for this.\n",
    "\n",
    ">>> 'AyuShi'.lower()\n",
    "\n",
    "##66What is slicing?\n",
    "\n",
    "Slicing is a technique that allows us to retrieve only a part of a list, tuple, \n",
    "or string. For this, we use the slicing operator [].\n",
    "\n",
    "\n",
    "##77And how do you reverse a list?\n",
    "\n",
    "Using the reverse() method.\n",
    "\n",
    ">>> a.reverse()\n",
    ">>> a\n",
    "\n",
    "\n",
    "##88What is the use of self in Python?\n",
    "Self is used to represent the instance of the class. \n",
    "With this keyword, you can access the attributes and methods of the class in python. \n",
    "It binds the attributes with the given arguments. self is used in different places and often thought to be a keyword. \n",
    "But unlike in C++, self is not a keyword in Python.\n",
    "\n",
    "##99What is the difference between Python Arrays and lists?\n",
    "Arrays in python can only contain elements of same data types i.e., data type of array should be homogeneous. \n",
    "It is a thin wrapper around C language arrays and consumes far less memory than lists.\n",
    "Lists in python can contain elements of different data types i.e., \n",
    "data type of lists can be heterogeneous. It has the disadvantage of consuming large memory.\n",
    "\n",
    "##10What is lambda in Python? Why is it used?\n",
    "Lambda is an anonymous function in Python, that can accept any number of arguments, but can only have a single expression. It is generally used in situations requiring an anonymous function for a short time period. \n",
    "Lambda functions can be used in either of the two ways:\n",
    "    \n",
    "    \n",
    " ##11   What are Python Modules?\n",
    "Files containing Python codes are referred to as Python Modules. This code can either be classes, \n",
    "functions, or variables and saves the programmer time by providing the predefined functionalities when needed.\n",
    "It is a file with “.py” extension containing an executable code.\n",
    "\n",
    "Commonly used built modules are listed below:\n",
    "\n",
    "os\n",
    "sys\n",
    "data time\n",
    "math\n",
    "random\n",
    "JSON\n",
    "\n",
    "##12What are the common built-in data types in Python?\n",
    "Python supports the below-mentioned built-in data types:\n",
    "\n",
    "Immutable data types:\n",
    "\n",
    "Number\n",
    "String\n",
    "Tuple\n",
    "Mutable data types:\n",
    "\n",
    "List\n",
    "Dictionary\n",
    "set\n",
    "\n",
    "##13What is PYTHON PATH?\n",
    "PYTHONPATH is an environment variable that allows the user to add additional folders to the sys.path directory list for Python. In a nutshell, \n",
    "it is an environment variable that is set before the start of the Python interpreter.\n",
    "\n",
    "##14 Is Python statically typed or dynamically typed language?\n",
    "Python is a dynamically typed language.\n",
    "\n",
    "\n",
    "##15What are mutable and immutable data types?\n",
    "Mutable data types can be changed after creating them. Some of the mutable objects in Python are list, set, dict.\n",
    "\n",
    "Immutable data types can’t be changed after creating them. Some of the immutable objects in Python are str, tuple.\n",
    "\n",
    "\n",
    "##16Explain some methods of the list.\n",
    "1. append – the method is used to add an element to the list. It adds the element to the end of the list.\n",
    "\n",
    ">>> a = [1, 2]\n",
    ">>> a.append(3)\n",
    ">>> a\n",
    "[1, 2, 3]\n",
    "\n",
    "##17 Which data types allow slicing?\n",
    "We can use slicing on list, tuple, and str data types\n",
    "\n",
    "##18 What are break and continue statements?\n",
    "break – the break statement is used to terminate the running loop. \n",
    "The execution of the code will jump to the outside of the break loop.\n",
    "\n",
    ">>> for i in range(5):\n",
    "...     if i == 3:\n",
    "...             break\n",
    "...     print(i)\n",
    "...\n",
    "0\n",
    "1\n",
    "2\n",
    "\n",
    "\n",
    "continue – the continue statement is used to skip the execution of the remaining code. \n",
    "The code after the continue statement doesn’t execute in the current iteration, and the execution goes to the next iteration.\n",
    "\n",
    ">>> for i in range(5):\n",
    "...     if i == 3:\n",
    "...             continue\n",
    "...     print(i)\n",
    "...\n",
    "0\n",
    "1\n",
    "2\n",
    "4\n",
    "\n",
    "##19\n",
    "What’s the difference between normal function and lambda function?\n",
    "The functionality of both normal functions and lambda functions are similar.\n",
    "But, we need to write some extra code in normal functions compared to lambda functions for the same functionality.\n",
    "\n",
    "Lambda functions come in handy when there is a single expression.\n",
    "\n",
    "\n",
    "\n",
    "##20 What is the __init__ method?\n",
    "The __init__ is the constructor method similar to the constructors in other OOP languages. It executes immediately when we create an object for the class. \n",
    "It’s used to initialize the initial data for the instance.\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
